# Creates a database backup and fetches it to the local machine.


- name: Make a database backup, if it's enabled  
  block:
    - name: Ensure remote temp folder exists
      file:
        path: "{{ backup_remote_folder }}"
        state: directory
        owner: "{{ deployment_user_name }}"
        group: "{{ deployment_user_name }}"
        mode: 0774
      become: yes

    - name: Set constant dump filepath
      set_fact:
        backup_db_dump_filepath: "{{ backup_remote_folder }}/{{ backup_db_dump_filename }}_{{ backup_db_dump_filename_suffix }}"
    
    # Backup existing .pgpass file
    - name: Check if .pgpass exists
      stat:
        path: "~/.pgpass"
      register: existing_pgpass
      become: yes

    - name: Backup existing .pgpass file
      copy:
        src: "~/.pgpass"
        dest: "~/.pgpass.backup"
        remote_src: yes
      when: existing_pgpass.stat.exists
      become: yes

    # Create database dump on the remote machine
    - name: Create temporary .pgpass file
      copy:
        content: "{{ backend_setting_db_database_host }}:{{ backend_setting_db_database_port }}:{{ backend_setting_db_database }}:{{ backend_setting_db_init_username }}:{{ backend_setting_db_init_password }}"
        dest: "~/.pgpass"
        mode: "0600"  # permissions are required for the file to be properly used by pg_dump
      become: yes

    - name: Make backup on remote machine
      # "host" arg is required to use password authentication (credentials stored in .pgpass)
      command: "pg_dump --username='{{ backend_setting_db_init_username }}' --host='{{ backend_setting_db_database_host }}' --port={{ backend_setting_db_database_port }} --format=tar --exclude-table='searchables' --dbname='{{ backend_setting_db_database }}' --file='{{ backup_db_dump_filepath }}'"
      become: yes
    
    - name: Change dump ownership
      command: chown {{ deployment_user_name }} '{{ backup_db_dump_filepath }}'
      become: yes

    # Restore previously existing .pgpass file or delete temporary file
    - name: Backup existing .pgpass file
      command: mv ~/.pgpass.backup ~/.pgpass
      when: existing_pgpass.stat.exists
      become: yes

    - name: Remove temp .pgpass file
      file:
        path: "~/.pgpass"
        state: absent
      when: not existing_pgpass.stat.exists
      become: yes

    # Rotate backups and fetch new dump
    - name: Rotate existing local backups
      local_action: "command bash {{ role_path }}/scripts/rotate_backups.sh"
      register: backup_rotation

    # - name: Print backup rotation log
    #   debug:
    #     msg: "{{ backup_rotation }}"

    - name: Fetch new dump
      # fetch:
      synchronize:
        mode: pull
        src: "{{ backup_db_dump_filepath }}"
        dest: "{{ backup_local_folder }}/{{ backup_db_dump_filename }}"
      # become: yes

    - name: Remove dump on remote
      file:
        path: "{{ backup_db_dump_filepath }}"
        state: absent
      become: yes

  when: backup_db_max_backup_count | int > 0
